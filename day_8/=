use std::fs;
use std::collections::HashSet;

fn read_input_file()->String{
    let file_path = "src/input.txt";
    println!("Reading from file {:?}", file_path);
    let contents = fs::read_to_string(file_path).expect("Oh no we didn't find anything");
    return contents;
}

fn trees_from_vec(trees: &Vec<u32>, direction: i32) -> u32 {
    let mut biggest_tree: u32 = trees[0];
    let mut seen: HashSet<(u32,u32)> = HashSet::new();
    let default_direction = [0,0]
    for &tree in trees.iter(){
        if tree > biggest_tree {
            seen += 1;
            biggest_tree = tree;
        }
    }
    println!("1 {:?}", trees);
    println!("1 {:?}", seen);
    // also get the reverse of these trees
    biggest_tree = trees[trees.len()-1];
    seen += 1;
    println!("2 {:?}", trees);
    println!("biggest tree 2 {:?}", biggest_tree);
    for &tree in trees.iter().rev(){
        if tree > biggest_tree {
            seen += 1;
            biggest_tree = tree;
        }
    }
    println!("2 {:?}", seen);

    return seen;
}
fn iterate_over_row_col(trees: Vec<Vec<u32>>, mut seen_trees: Vec<Vec<bool>>, is_row: bool, start_index: usize){
    let row = if is_row {start_index} else {0};
    let col = if is_row {0} else {start_index};
    let delta = [is_row as i32, !is_row as i32];
    let tallest = trees[col][row];
    seen_trees[col][row] = True;
    while col < trees.len() && row < trees.len() {



    }

}

fn problem_1(input: &str) -> u32{
    // parse input into 2d array
    let grid: Vec<Vec<u32>> = input.split("\n").filter(|x| x.len() > 0).map(|row| row.chars().map(|num| num.to_digit(10).unwrap()).collect()).collect();
    let mut total = 0;
    println!("{:?}", &grid[0]);
    println!("{:?}", &grid.iter().map(|row| row[0]).collect::<Vec<u32>>());
    for i in 0..grid.len(){
        total += trees_from_vec(&grid[i]);
        total += trees_from_vec(&grid.iter().map(|row| row[i] ).collect());
    }
    return total;


}



fn main() {
    let input = read_input_file();
    let solution_1 = problem_1(&input);
    println!("Problem1: {:?}", solution_1);
}
